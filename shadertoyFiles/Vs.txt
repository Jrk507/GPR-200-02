#version 300 es

//MAIN DUTY : PROCESS ATTRIBUTES 
//Process 3D position in space 
//Process surface normal
//Process 2D uv : Texture cordinate aPosition
in vec4 aPosition;//modern declaration of an attribute
layout(location = 1) in vec3 aNormal;//can just call in vec3 aNormal;
//old version put attribute not in
//TRANSFORMING UNIFORMS
uniform mat4 uModelMat;
uniform mat4 uViewMat;
uniform mat4 uProjMat;//Projection Matrix
uniform mat4 uViewProjMat;
// VARYING 
//PER-VERTEX SEND FINAL COLOR
//out vec4 vColor;
//PER-FRAGMENT
out vec4 vNormal;
//varying in front was the old way
void main()
{
   //REQUIRED: set following value
   //gl_Position is in "clip space"
   //aPosition is in "object space"
   //gl_Position = aPosition;
   
   //position in world space(wrong)
   vec4 pos_world = uModelMat * aPosition;
   
   //position in "view space" (wrong)
   vec4 pos_view = uViewMat * pos_world; 
  
   //position in "clip space"
   //vec4 pos_clip = uProjMat * uViewMat * uModelMat * aPosition; 
   //vec4 pos_clip = uProjMat * uViewMat * pos_world;

  
  //POSITION PIPELINE
  mat4 uModelViewMat = uViewMat * uModelMat; 
  vec4 pos_camera = uModelViewMat * aPosition;
  vec4 pos_clip = uProjMat * pos_camera;
   gl_Position = pos_clip;
   
   //NORMAL PIPELINE
   mat3 normMat = transpose(inverse(mat3(uModelViewMat)));
   //vec3 norm_camera = vec3(uModelViewMat) * aNormal;
   vec3 norm_camera = normMat * aNormal;
     //optional: set varying
//   vColor = vec4(1.5, 0.0, 1.0, 1.0);
   //DEBUGGING: 
   
   //FINAL COLOR 
//   vColor = vec4(aNormal* 0.5 + 0.5,1.0);
   
   //PER FRAGMENT PASS WHATS NEEDED FOR FINAL COLOR
//   vNormal = vec4(aNormal, 0.0);
   vNormal = vec4(norm_camera,0.0);
}