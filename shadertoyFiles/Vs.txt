#version 300 es
//#version 450

// MAIN DUTY: PROCESS ATTRIBUTES
// e.g. 3D position in space
// e.g. normal
// e.g. 2D uv: texture coordinate


layout (location = 0) in vec4 aPosition;
layout (location = 1) in vec3 aNormal;
//in vec4 aPosition;

 //TRANSFORM UNIFORM
uniform mat4 uModelMat;//object space
uniform mat4 uViewMat;//view space
uniform mat4 uProjMat;//clip space
uniform mat4 uViewProjMat;//world space



//VARYING PER VERTEX
out vec4 vColor;
out vec3 nNormal;
out vec3 nPosition;//position our colors start
out vec3 posCamera;
void main()
{
	
//currently set for fragment
	vec3 pos_light =vec3(0.5,0.5,0.45);
	vec3 pos_cam = posCamera;
    vColor = vec4(0.5,0.5,0.5,1.0);//original base color of the geometry
    vec4 viewPos = uViewMat * uModelMat * aPosition;
    gl_Position = uProjMat * viewPos ;//Without this we have black screen
	nPosition = aPosition.xyz;//initialize a varying
	//Start of lambert
	float dist = normalize(length(pos_light - nPosition));//distance between the light and sphere 
	float distSQ = dist * dist;
	float lightIntensity = 16.0;
	float attenuation = 1.0/((1.0 + dist) / lightIntensity
		      + distSQ/ (lightIntensity * lightIntensity));
	//vColor += attenuation; //returns color(currently in object space)
	float diffuseCoefficient = max(0.0,dot(nPosition,pos_light));
	float diffuseIntensity = diffuseCoefficient * attenuation;
	vec4 lightColor = vec4(0.0,0.0,0.0, 1.0);
	//Final Color Lambertian
	vec4 sceneColor =diffuseIntensity * lightColor;
	vColor *= sceneColor;

	//Start Phong
	//Need our view vector
	vec4 viewNormal = uViewMat * uModelMat * vec4(nNormal, 0.0);
	vec3 viewVector = (pos_cam - vec3(viewPos));
	vec3 reflectedLight = reflect(-viewVector,normalize(pos_light));//reflect
	vColor = vec4(viewVector, 1.0);
	float specularCoefficient = max(0.0,dot(viewVector, reflectedLight));
	float highlightExponent = 156.0;//Not changing much of anything after the jump from 0 to 1
	float specularIntensity = pow(specularCoefficient, highlightExponent);
	vec4 ambientColor = vec4(cos(aNormal), 1.0);//static ambien color
    float ambientIntensity = 2.25;//static ambient intensity
	vColor = ambientIntensity * (ambientColor + vec4(sceneColor+specularIntensity))/2.;
}
//PER VERTEX
//VARYING PER Vertex
//out vec4 vColor;
//out vec3 nNormal;
//out vec3 nPosition;//position our colors start
//out vec3 posCamera;
//layout (location = 0)out vec4 rtFragColor;
//void main()
//{
	// properties
  //  vec3 norm = normalize(nNormal);
  //  vec3 viewDir = normalize(posCamera - nPosition);
//	rtFragColor = vColor;
//}