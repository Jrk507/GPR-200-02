#version 300 es
//#version 450

#ifdef GL_ES
precision highp float;
#endif // GL_ES

layout (location = 0)out vec4 rtFragColor;
//out vec4 rtFragColor;

 struct PointLight {    
    vec3 position;
    
    float constant;
    float linear;
    float quadratic;  

    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};

#define NR_POINT_LIGHTS 1 
uniform PointLight pointLights[NR_POINT_LIGHTS];

void initPointLight(out PointLight light,
                    in float constant,
                  	in float linear,
                    in float quadratic)
{
    light.constant = constant;
    light.linear = linear;
    light.quadratic = quadratic;
    light.ambient = vec3(1.0);
    light.diffuse = vec3(1.0);
    light.specular = vec3(1.0);
}
vec3 CalcPointLight(PointLight light, vec3 normal, vec3 fragPos, vec3 viewDir)
{
    vec3 lightDir = normalize (light.position - fragPos);
    // diffuse shading
    float diff = max(dot(normal, lightDir), 0.0);
    // specular shading
    vec3 reflectDir = reflect(-lightDir, normal);
   
    // attenuation
    float distance    = length(light.position - fragPos);
    float attenuation = 1.0 / (light.constant + light.linear * distance + 
  			     light.quadratic * (distance * distance));    
  	vec3 ambient = vec3(1.0);
  	vec3 diffuse = vec3(1.0);
  	vec3 specular = vec3(1.0);		     
    // combine results
    ambient  *= attenuation;
    diffuse  *= attenuation;
    specular *= attenuation;
    return (ambient + diffuse + specular);
} 

in vec4 vColor;
in vec3 nNormal;
in vec3 nPosition;
in vec3 posCamera;
void main()
{
	PointLight light;
    initPointLight(light, 1.0, 0.0014, 0.000007);
	// properties
    vec3 norm = normalize(nNormal);
    vec3 viewDir = normalize(posCamera - nPosition);

	vec3 result = vec3(0.0);
    // phase 2: Point lights
    for(int i = 0; i < NR_POINT_LIGHTS; i++)
        result += CalcPointLight(pointLights[i], norm, nPosition, posCamera);      
    
    //rtFragColor = vec4(result, 1.0);
	rtFragColor = vColor * vec4(result, 1.0);
	//rtFragColor = vec4(0.5,0.0,0.25,1.0);
}