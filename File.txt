// GLSL STARTER CODE BY DANIEL S. BUCKSTEIN
// Edited by Jason Kmieciak & Nicholas Sanguine

//------------------------------------------------------------
// TYPE ALIASES & UTILITY FUNCTIONS

// sScalar: alias for a 1D scalar (non-vector)
#define sScalar float

// sCoord: alias for a 2D coordinate
#define sCoord vec2

// sDCoord: alias for a 2D displacement or measurement
#define sDCoord vec2

// sBasis: alias for a 3D basis vector
#define sBasis vec3

// sPoint: alias for a point/coordinate/location in space
#define sPoint vec4

// sVector: alias for a vector/displacement/change in space
#define sVector vec4


// color3: alias for a 3D vector representing RGB color
// 	(this is non-spatial so neither a point nor vector)
#define color3 vec3

// color4: alias for RGBA color, which is non-spatial
// 	(this is non-spatial so neither a point nor vector)
#define color4 vec4

// asPoint: promote a 3D vector into a 4D vector 
//	representing a point in space (w=1)
//    v: input 3D vector to be converted
sPoint asPoint(in sBasis v)
{
    return sPoint(v, 1.0);
}

// asVector: promote a 3D vector into a 4D vector 
//	representing a vector through space (w=0)
//    v: input 3D vector to be converted
sVector asVector(in sBasis v)
{
    return sVector(v, 0.0);
}


// lengthSq: calculate the squared length of a vector type
sScalar lengthSq(sDCoord x)
{
    return dot(x, x);
}
sScalar lengthSq(sBasis x)
{
    return dot(x, x);
}
sScalar lengthSq(sVector x)
{
    return dot(x, x);
}


//------------------------------------------------------------
// VIEWPORT INFO

// sViewport: info about viewport
//    viewportPoint: location on the viewing plane 
//							x = horizontal position
//							y = vertical position
//							z = plane depth (negative focal length)
//	  pixelCoord:    position of pixel in image
//							x = [0, width)	-> [left, right)
//							y = [0, height)	-> [bottom, top)
//	  resolution:    resolution of viewport
//							x = image width in pixels
//							y = image height in pixels
//    resolutionInv: resolution reciprocal
//							x = reciprocal of image width
//							y = reciprocal of image height
//	  size:       	 in-scene dimensions of viewport
//							x = viewport width in scene units
//							y = viewport height in scene units
//	  ndc: 			 normalized device coordinate
//							x = [-1, +1) -> [left, right)
//							y = [-1, +1) -> [bottom, top)
// 	  uv: 			 screen-space (UV) coordinate
//							x = [0, 1) -> [left, right)
//							y = [0, 1) -> [bottom, top)
//	  aspectRatio:   aspect ratio of viewport
//	  focalLength:   distance to viewing plane
struct sViewport
{
    sPoint viewportPoint;
	sCoord pixelCoord;
	sDCoord resolution;
	sDCoord resolutionInv;
	sDCoord size;
	sCoord ndc;
	sCoord uv;
	sScalar aspectRatio;
	sScalar focalLength;
};

// initViewport: calculate the viewing plane (viewport) coordinate
//    vp: 		      output viewport info structure
//    viewportHeight: input height of viewing plane
//    focalLength:    input distance between viewer and viewing plane
//    fragCoord:      input coordinate of current fragment (in pixels)
//    resolution:     input resolution of screen (in pixels)
void initViewport(out sViewport vp,
                  in sScalar viewportHeight, in sScalar focalLength,
                  in sCoord fragCoord, in sDCoord resolution)
{
    vp.pixelCoord = fragCoord;
    vp.resolution = resolution;
    vp.resolutionInv = 1.0 / vp.resolution;
    vp.aspectRatio = vp.resolution.x * vp.resolutionInv.y;
    vp.focalLength = focalLength;
    vp.uv = vp.pixelCoord * vp.resolutionInv;
    vp.ndc = vp.uv * 2.0 - 1.0;
    vp.size = sDCoord(vp.aspectRatio, 1.0) * viewportHeight;
    vp.viewportPoint = asPoint(sBasis(vp.ndc * vp.size * 0.5, -vp.focalLength));
}


//------------------------------------------------------------
// RAY INFO

// sRay: ray data structure
//	  origin: origin point in scene
//    direction: direction vector in scene
struct sRay
{
    sPoint origin;
    sVector direction;
};

// initRayPersp: initialize perspective ray
//    ray: 		   output ray
//    eyePosition: position of viewer in scene
//    viewport:    input viewing plane offset
void initRayPersp(out sRay ray,
             	  in sBasis eyePosition, in sBasis viewport)
{
    // ray origin relative to viewer is the origin
    // w = 1 because it represents a point; can ignore when using
    ray.origin = asPoint(eyePosition);

    // ray direction relative to origin is based on viewing plane coordinate
    // w = 0 because it represents a direction; can ignore when using
    ray.direction = asVector(viewport - eyePosition);
}

// initRayOrtho: initialize orthographic ray
//    ray: 		   output ray
//    eyePosition: position of viewer in scene
//    viewport:    input viewing plane offset
void initRayOrtho(out sRay ray,
             	  in sBasis eyePosition, in sBasis viewport)
{
    // offset eye position to point on plane at the same depth
    initRayPersp(ray, eyePosition + sBasis(viewport.xy, 0.0), viewport);
}


//------------------------------------------------------------
// RENDERING FUNCTIONS
float pow4(in float a)
{
    a *= a; // square a
    a *= a;	// original a^4
   	return a;
}
//Code Reference "wipe_cross " by tejas : https://www.shadertoy.com/view/4ddXzX
color4 crossFade(in color4 texture1, in color4 texture2,in sScalar time)
{
    sScalar transitionTime = abs(sin(time));//sets iTime to sin and absolute it so it goes from 0 to 1
    color4 transition = mix(texture1,texture2,transitionTime);//mixes both textures together in terms of time
    return transition;
}
vec2 distortion(in sCoord px, in float intensity)
{
   float theta  = atan(px.y, px.x);//y over x for the returned fraction in the -π/2 , π/2 range
   float radius = length(px); //thinking in circles we need a radius from the passed position
   radius = pow(radius, intensity);//strength of distortion on the radius applied here
   px.x = radius * cos(theta);//alter x coord different trig functions change it greatly
   px.y = radius * tan(theta);//alter y coord
   return (px);//final alteration of coordinate // if you add or subtract in the parenthesis it picks up or puts image down
// All multiplication outside of the parenthesis continues to tighten or widen the distortion but that negates the purpose of intensity
}
sScalar lambertShading(in sViewport vp,in sScalar time)
{
    sBasis normal = normalize(sBasis(vp.viewportPoint.xy, 1.0));//sets unit normal vector
    sBasis lightPos = sBasis(0.0,-1.0,10.0)+ vec3(25.0,25.0,0.0) * vec3(sin(time/4.0),sin(time/4.0),0.0);//sets light postion
    sBasis surfacePos = sBasis(vp.viewportPoint.xyz);//sets texture surface position
    sScalar d = length(lightPos - surfacePos);// distance between the light's center and the surface point
    sBasis l = (lightPos - surfacePos)/d;//Calculates the light vector
    sScalar diffuseCoefficient = dot(normal,l);//diffuse coeffient found by doing the dot product of unit light vector and unit surface normal.
    diffuseCoefficient = max(0.0,diffuseCoefficient);//clamps the diffuse coefficient
    sScalar attenuatedIntensity = 1.0/(1.0+(d/400.0)+(pow4(d)/(400.0 * 400.0)));//sets the attenuatedIntensity using common attenuated function
    sScalar diffuseIntensity = attenuatedIntensity*diffuseCoefficient;//sets diffuse intensity for the texture image
    return diffuseIntensity;
}

// calcColor: calculate the color of current pixel
//	  vp:  input viewport info
//	  ray: input ray info
color4 calcColor(in sViewport vp, in sRay ray, in sScalar time, in sCoord resolution, in sampler2D texOne, in sampler2D texTwo, in samplerCube cube)
{
    // test inputs
//    return color4(ray.direction.xyz == vp.viewportPoint.xyz); // pass
//    return color4(lengthSq(vp.viewportPoint.xy) >= 0.25); // pass
    //return color4(vp.uv, 0.0, 0.0);
    //return color4(vp.ndc, 0.0, 0.0);
//    return vp.viewportPoint;
    // const color
   // return vec4(0.0,1.0,1.0,1.0);
    // textures
    //sampler2D tex = iChannel0;
    //sCoord loc = vp.uv; //relative to display
    sCoord px = vp.pixelCoord;//sets px to pixelCoord
    sCoord res =  texOne.xy ;//sets rres to iChannel 0
    sCoord loc = px / res; //relative to input
    sScalar ratio = res.y * vp.resolutionInv.y;//sets texture image ratio
    loc = loc * ratio + 1.0 ; //alter zoom
    //return color4(texture1);
    color4 texture1 = texture(texOne, loc);//color1
    color4 texture2 = texture(texTwo, loc);//color2
    color4 transition = crossFade(texture1, texture2, time);//Calls the crossFade function and sets it equal to transition
    //return transition;
   
    sCoord distorted = distortion(loc, 3.0);//calls the distortion function
    //return vec4(texture(iChannel0, distorted));//DISTORTION
    
    sScalar diffuseIntensity = lambertShading(vp,time);//calls lambertShading function
    color4 imageColor = texture1 * diffuseIntensity ;//Places the lambertshading light into the texture image
    return color4(imageColor);
   
    //return vec4(diffuseCoefficient, diffuseCoefficient, diffuseCoefficient, 1.0);
    //return color4(diffuseIntensity, diffuseIntensity, diffuseIntensity, 1.0);
    //return color4(texture2);// greyScale, one channel
    //testing for shading
    //return vp.viewportPoint;
    //return vec4(0.0, 0.0, 1.0, 1.0);
    
   // return vec4(
      //  normalize(vec3(vp.viewportPoint.xy, 1.0)),
      // 1.0);

    //Cube map
    // sampler type: 'samplerCube'
    //vec3 cubeLoc = ray.direction.xyz*vec3(distorted, 0.0);
    ray.direction.xy = ray.direction.xy * distorted;//sets ray direction xy with the distortion effect
    vec3 cubeLoc = ray.direction.xyz;//sets ray direction to variable cubeLoc
    mat3 m = mat3(//sets rotation matrix in terms of time
    cos(time),0.0,sin(time),
    0.0,1.0,0.0,
    -sin(time),0.0,cos(time));
    cubeLoc =( m * cubeLoc);//multiples cubeLoc and rotation matric
    //return texture(cube, cubeLoc);
	

}


//------------------------------------------------------------
// SHADERTOY MAIN

// mainImage: process the current pixel (exactly one call per pixel)
//    fragColor: output final color for current pixel
//    fragCoord: input location of current pixel in image (in pixels)
void mainImage(out color4 fragColor, in sCoord fragCoord)
{
    // viewing plane (viewport) inputs
    const sBasis eyePosition = sBasis(0.0);
    const sScalar viewportHeight = 2.0, focalLength = 1.5;
    
    // viewport info
    sViewport vp;

    // ray
    sRay ray;
    
    //iTime
    sScalar time = iTime;
    
    //Resolution
    sCoord res = iChannelResolution[0].xy;
 
    // render
    initViewport(vp, viewportHeight, focalLength, fragCoord, iResolution.xy);
    initRayPersp(ray, eyePosition, vp.viewportPoint.xyz);
    fragColor += calcColor(vp, ray, time,res, iChannel0, iChannel1, iChannel2);
    //fragColor = vec4(__VERSION__>=300); // TROUBLESHOOTING
}