// GLSL STARTER CODE BY DANIEL S. BUCKSTEIN
//  -> BUFFER A TAB (scene)

//------------------------------------------------------------
// RENDERING FUNCTIONS

// calcColor: calculate the color of current pixel
//	  vp:  input viewport info
//	  ray: input ray info
<<<<<<< HEAD
color4 calcColor(in sViewport vp, in sRay ray, in sScalar time, in samplerCube cube)
=======
color4 calcColor(in sViewport vp, in sRay ray, in sScalar time , in samplerCube  cube)
>>>>>>> origin/Lab-6
{
    // test inputs
    //return color4(ray.direction.xyz == vp.viewportPoint.xyz); // pass
    //return color4(lengthSq(vp.viewportPoint.xy) >= 0.25); // pass
    //return color4(vp.uv, 0.0, 0.0);
    //return color4(vp.ndc, 0.0, 0.0);
    //return asPoint(sBasis(vp.viewportPoint.xy, -vp.viewportPoint.z));
<<<<<<< HEAD
    ray.direction.xy = ray.direction.xy;//sets ray direction xy with the distortion effect
    vec3 cubeLoc = ray.direction.xyz;//sets ray direction to variable cubeLoc
    mat3 m = mat3(//sets rotation matrix in terms of time
    cos(time),0.0,sin(time),
    0.0,1.0,0.0,
    -sin(time),0.0,cos(time));
=======
   
    //Cube map
    vec3 cubeLoc = ray.direction.xyz;//sets ray direction to variable cubeLoc
    mat3 m = mat3(cos(time),0.0,sin(time),0.0,1.0,0.0,-sin(time),0.0,cos(time));//sets rotation matrix in terms of time
>>>>>>> origin/Lab-6
    cubeLoc =( m * cubeLoc);//multiples cubeLoc and rotation matric
    return texture(cube, cubeLoc);
}


//------------------------------------------------------------
// SHADERTOY MAIN

// mainImage: process the current pixel (exactly one call per pixel)
//    fragColor: output final color for current pixel
//    fragCoord: input location of current pixel in image (in pixels)
void mainImage(out color4 fragColor, in sCoord fragCoord)
{
    // viewing plane (viewport) inputs
    const sBasis eyePosition = sBasis(0.0);
    const sScalar viewportHeight = 2.0, focalLength = 1.5;
    
    // viewport info
    sViewport vp;

    // ray
    sRay ray;
    
    //iTime
    sScalar time = iTime;
    
    
    // render
    initViewport(vp, viewportHeight, focalLength, fragCoord, iResolution.xy);
    initRayPersp(ray, eyePosition, vp.viewportPoint.xyz);
<<<<<<< HEAD
    fragColor += calcColor(vp, ray, time , iChannel1);
=======
    fragColor += calcColor(vp, ray, iTime, iChannel0);
>>>>>>> origin/Lab-6
}
