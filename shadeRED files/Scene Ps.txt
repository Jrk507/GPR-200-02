#version 300 es
//Editors: Jason Kmieciak & Nicholas Sanguine
//Credit: by dfranx : https://shadered.org/view?s=qtAFNPvHIE 
precision highp float;

in vec3 objPosition;
in vec3 objNormal;

out vec4 outColor;

uniform vec3 viewPosition;
uniform vec3 matColor;
uniform float matShininess;
uniform vec3 lightAmbient;
uniform vec3 lightDiffuse;
uniform vec3 lightSpecular;

void main() {
	vec3 lightPos = vec3(5.0,9.0,0.5);
	vec3 nView = normalize(viewPosition - objPosition);
	vec3 nLight = normalize(lightPos-objPosition);
	vec3 nNormal = normalize(objNormal);
	vec3 nRefl = reflect(-nLight, nNormal);
	
	float dotLN = dot(nLight, nNormal);
	
	vec3 diffuse = lightDiffuse * dotLN;
	vec3 specular = pow(max(0.0, dot(nView,nRefl)), matShininess) * lightSpecular;
	 
	float dst = distance(lightPos, objPosition);
	float attn = 1./(1.0f + 0.1f*dst + 0.01f*dst*dst) ;
	vec3 color = ((diffuse + specular)*attn + lightAmbient)*matColor;
	
	outColor = vec4(color, 1.0f);
}
